"""
Django settings for qsts3 project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import glob
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = "QSTS_DEBUG" in os.environ

ALLOWED_HOSTS = ["qs-dev.toolforge.org", "localhost"]
CSRF_TRUSTED_ORIGINS = ["http://localhost:8000", "https://qs-dev.toolforge.org/"]

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "rest_framework",
    "rest_framework.authtoken",
]
PROJECT_APPS = ["core", "web", "api"]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "web.middleware.language_cookie_middleware",
]


ROOT_URLCONF = "qsts3.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "qsts3.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# MariaDB setup
DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.mysql"),
        "NAME": os.getenv("DB_NAME", "quickstatements"),
        "USER": os.getenv("DB_USER", "quickstatements"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST", "mariadb"),
        "PORT": os.getenv("DB_PORT", 3306),
        "TEST": {
            "MIGRATE": False,
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.getenv("STATIC_ROOT", os.path.join(BASE_DIR, "static"))

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

APPEND_SLASH = True


LOG_LEVEL = "DEBUG" if DEBUG else "INFO"
APP_LOG_CONFIG = {
    "handlers": ["console"],
    "level": LOG_LEVEL,
    "propagate": True,
}
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "%(levelname)s:%(module)s:%(funcName)s #%(lineno)d %(message)s"
        },
        "complete": {
            "format": "%(asctime)s %(levelname)s:%(module)s %(process)d %(lineno)d %(message)s"
        },
        "django": {"format": "%(asctime)s %(levelname)s: %(message)s"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "django": {
            "class": "logging.StreamHandler",
            "formatter": "django",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["django"],
            "level": "INFO",
        },
        "urllib3": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "qsts3": APP_LOG_CONFIG,
    },
}

for app in PROJECT_APPS:
    LOGGING["loggers"][app] = APP_LOG_CONFIG


REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "QuickStatements",
    "DESCRIPTION": "REST API",
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
}


LOGIN_URL = "/auth/login/"

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale")]

LANGUAGE_CODE = "en"

translations = []

for path in glob.glob("../translations/*.json"):
    code = path.split("translations/")[-1].split(".json")[0]
    if code != "qqq":
        translations.append(code)

TRANSLATED_LANGUAGES = sorted(translations)

# -----------------
# App configuration
# -----------------
OAUTH_CLIENT_ID = os.getenv("OAUTH_CLIENT_ID")
OAUTH_CLIENT_SECRET = os.getenv("OAUTH_CLIENT_SECRET")

OAUTH_AUTHORIZATION_SERVER = os.getenv(
    "OAUTH_AUTHORIZATION_SERVER", "https://www.wikidata.org"
)
OAUTH_ACCESS_TOKEN_URL = os.getenv(
    "OAUTH_ACCESS_TOKEN_URL",
    f"{OAUTH_AUTHORIZATION_SERVER}/w/rest.php/oauth2/access_token",
)
OAUTH_AUTHORIZATION_URL = os.getenv(
    "OAUTH_AUTHORIZATION_URL",
    f"{OAUTH_AUTHORIZATION_SERVER}/w/rest.php/oauth2/authorize",
)
OAUTH_PROFILE_URL = os.getenv(
    "OAUTH_PROFILE_URL",
    f"{OAUTH_AUTHORIZATION_SERVER}/w/rest.php/oauth2/resource/profile",
)

WHITELISTED_USERS = [n.strip() for n in os.getenv("WHITELISTED_USERS", "").split(",")]

# Default Wikibase
DEFAULT_WIKIBASE_URL = os.getenv("DEFAULT_WIKIBASE_URL", "https://www.wikidata.org")

# To use with EditGroups integration
TOOLFORGE_TOOL_NAME = os.getenv("TOOLFORGE_TOOL_NAME")
